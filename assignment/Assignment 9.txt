9) Describe all the List, Set, Map implemented classes and their preferred usage in terms    of storage, retrieval and null Handling.

Answer: List

List interface in Java is a sub-interface of the Java collections interface. It contains the index-based methods to insert, update, delete, and search the elements. It can have duplicate elements also. We can also store the null elements in the list. List preserves the insertion order, it allows positional access and insertion of elements. It can be implemented by importing the java.util.List package. 

Set

The Set follows the unordered way and it can be implemented by importing the java.util.Set package. It extends the collection interface in java. Duplicate item will be ignored in Set and it will not print in the final output.

Map

The Java Map interface, java.util.Map represents a mapping between a key and a value. More specifically, a Java Map can store pairs of keys and values. Each key is linked to a specific value. Once stored in a Map, the value can be looked up later using just the key.

Difference between List, Set and Map

1. Duplicate Elements

	The list interface allows duplicate elements.
	Set does not allow duplicate elements.
	The map does not allow duplicate elements.

2. Insertion order

	The list maintains insertion order.
	Set do not maintain any insertion order. 
	The map also does not maintain any insertion order.

3. Null Handling

	We can add any number of null values in List.
	But in set almost only one null value can be added.
	The map allows a single null key at most and any number of null values.

4. Implementation classes

	List implementation classes are Array List, LinkedList.
	Set implementation classes are HashSet, LinkedHashSet, and TreeSet. 
	Map implementation classes are HashMap, HashTable, TreeMap, ConcurrentHashMap, and LinkedHashMap.

5. Retrieval

	The list provides get() method to get the element at a specified index.
	Set does not provide get method to get the elements at a specified index.
	The map does not  provide get method to get the elements at a specified index.

6. Usage

	To access the elements frequently by using the index then the list can be used.
	To create a collection of unique elements then set can be used.
	To store the data in the form of key/value pair then the map can be used.

7. Traversal

	To traverse the list elements, Listlterator is used.
	Iterator can be used traverse the set elements.
	Map elements are traversed through keyset, value, and entry set.